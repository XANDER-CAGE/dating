import { NestFactory } from '@nestjs/core';
import { AppModule } from '../src/app.module';
import { DataSource } from 'typeorm';
import { DatabaseSeeder } from '../database/seeds';

async function runSeeds() {
  console.log('üå± –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∏–¥–æ–≤...');
  
  const app = await NestFactory.createApplicationContext(AppModule);
  const dataSource = app.get(DataSource);
  
  const seeder = new DatabaseSeeder(dataSource);

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);
  const command = args[0] || 'all';
  const count = parseInt(args[1]) || 50;

  try {
    switch (command) {
      case 'all':
        await seeder.runAllSeeds();
        break;
        
      case 'demo':
        await seeder.runDemoSeeds();
        break;
        
      case 'clear':
        await seeder.clearDatabase();
        break;
        
      case 'reset':
        await seeder.clearDatabase();
        await seeder.runAllSeeds();
        break;
        
      case 'location':
        const { runLocationSeeds } = await import('../database/seeds/location.seed');
        await runLocationSeeds(dataSource, count);
        break;
        
      default:
        console.log('ü§î –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  npm run seed all      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∏–¥—ã');
        console.log('  npm run seed demo     - –¢–æ–ª—å–∫–æ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
        console.log('  npm run seed clear    - –û—á–∏—Å—Ç–∏—Ç—å –ë–î');
        console.log('  npm run seed reset    - –û—á–∏—Å—Ç–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å');
        console.log('  npm run seed location [count] - –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–¥–æ–≤:', error);
    process.exit(1);
  } finally {
    await app.close();
  }
}

if (require.main === module) {
  runSeeds();
}