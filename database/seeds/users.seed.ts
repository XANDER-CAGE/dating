import { DataSource } from 'typeorm';
import { User } from '../../src/users/entities/user.entity';
import * as bcrypt from 'bcrypt';

interface SeedUser {
  email: string;
  password: string;
  phone?: string;
  isVerified?: boolean;
}

const SEED_USERS: SeedUser[] = [
  {
    email: 'admin@dating-app.com',
    password: 'Admin123456',
    phone: '+79991234567',
    isVerified: true,
  },
  {
    email: 'anna.moscow@test.com',
    password: 'Test123456',
    phone: '+79991234568',
    isVerified: true,
  },
  {
    email: 'alex.moscow@test.com', 
    password: 'Test123456',
    phone: '+79991234569',
    isVerified: true,
  },
  {
    email: 'maria.spb@test.com',
    password: 'Test123456',
    phone: '+79991234570',
    isVerified: true,
  },
];

export async function runUserSeeds(dataSource: DataSource): Promise<User[]> {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const userRepository = dataSource.getRepository(User);
  const createdUsers: User[] = [];

  for (const userData of SEED_USERS) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await userRepository.findOne({
      where: { email: userData.email }
    });

    if (existingUser) {
      console.log(`‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      createdUsers.push(existingUser);
      continue;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(userData.password, 12);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = userRepository.create({
      email: userData.email,
      phone: userData.phone,
      passwordHash,
      isVerified: userData.isVerified ?? false,
      isActive: true,
    });

    const savedUser = await userRepository.save(user);
    createdUsers.push(savedUser);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.email}`);
  }

  console.log(`üë• –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${createdUsers.length}`);
  return createdUsers;
}