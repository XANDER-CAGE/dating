import { DataSource } from 'typeorm';
import { Profile, Gender, InterestedIn } from '../../src/profiles/entities/profile.entity';
import { User } from '../../src/users/entities/user.entity';
import * as bcrypt from 'bcrypt';

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏
const RUSSIAN_CITIES = [
  { name: '–ú–æ—Å–∫–≤–∞', lat: 55.7558, lng: 37.6176, country: '–†–æ—Å—Å–∏—è' },
  { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', lat: 59.9311, lng: 30.3609, country: '–†–æ—Å—Å–∏—è' },
  { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', lat: 56.8431, lng: 60.6454, country: '–†–æ—Å—Å–∏—è' },
  { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', lat: 55.0084, lng: 82.9357, country: '–†–æ—Å—Å–∏—è' },
  { name: '–ö–∞–∑–∞–Ω—å', lat: 55.8304, lng: 49.0661, country: '–†–æ—Å—Å–∏—è' },
  { name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', lat: 56.2965, lng: 43.9361, country: '–†–æ—Å—Å–∏—è' },
  { name: '–ß–µ–ª—è–±–∏–Ω—Å–∫', lat: 55.1644, lng: 61.4368, country: '–†–æ—Å—Å–∏—è' },
  { name: '–°–∞–º–∞—Ä–∞', lat: 53.2001, lng: 50.1500, country: '–†–æ—Å—Å–∏—è' },
];

const FEMALE_NAMES = [
  '–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–û–ª—å–≥–∞', '–°–æ—Ñ–∏—è', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', 
  '–î–∞—Ä—å—è', '–ü–æ–ª–∏–Ω–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–Æ–ª–∏—è', '–¢–∞—Ç—å—è–Ω–∞', '–ò—Ä–∏–Ω–∞'
];

const MALE_NAMES = [
  '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–ª–µ–∫—Å–µ–π', '–ê—Ä—Ç—ë–º',
  '–ò–ª—å—è', '–ö–∏—Ä–∏–ª–ª', '–ú–∏—Ö–∞–∏–ª', '–ù–∏–∫–∏—Ç–∞', '–ú–∞—Ç–≤–µ–π', '–†–æ–º–∞–Ω', '–î–∞–Ω–∏–∏–ª'
];

const INTERESTS = [
  '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '–∫–∏–Ω–æ', '–∫–Ω–∏–≥–∏', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
  '—Ç–∞–Ω—Ü—ã', '–π–æ–≥–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–∏–∑–∞–π–Ω', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Ç–µ–∞—Ç—Ä', '–∫–æ–Ω—Ü–µ—Ä—Ç—ã',
  '–ø—Ä–∏—Ä–æ–¥–∞', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–±–µ–≥', '–ø–ª–∞–≤–∞–Ω–∏–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–Ω–∞—É–∫–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏'
];

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ –≥–æ—Ä–æ–¥–∞
function generateCityCoordinates(cityLat: number, cityLng: number, radiusKm: number = 15) {
  const radiusDeg = radiusKm / 111; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –∫–º –≤ –≥—Ä–∞–¥—É—Å—ã
  const angle = Math.random() * 2 * Math.PI;
  const distance = Math.random() * radiusDeg;
  
  return {
    latitude: cityLat + (distance * Math.cos(angle)),
    longitude: cityLng + (distance * Math.sin(angle)),
  };
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
function generateRandomInterests(): string[] {
  const count = Math.floor(Math.random() * 4) + 2; // 2-6 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  return INTERESTS.sort(() => 0.5 - Math.random()).slice(0, count);
}

export async function runLocationSeeds(dataSource: DataSource, count: number = 50): Promise<void> {
  console.log(`üó∫Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π...`);
  
  const userRepository = dataSource.getRepository(User);
  const profileRepository = dataSource.getRepository(Profile);
  
  for (let i = 0; i < count; i++) {
    try {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥
      const city = RUSSIAN_CITIES[Math.floor(Math.random() * RUSSIAN_CITIES.length)];
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª –∏ –∏–º—è
      const gender = Math.random() > 0.5 ? Gender.FEMALE : Gender.MALE;
      const names = gender === Gender.FEMALE ? FEMALE_NAMES : MALE_NAMES;
      const name = names[Math.floor(Math.random() * names.length)];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email
      const email = `${name.toLowerCase()}.${city.name.toLowerCase()}${i}@test.com`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await userRepository.findOne({ where: { email } });
      if (existingUser) continue;
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const passwordHash = await bcrypt.hash('Test123456', 12);
      const user = userRepository.create({
        email,
        passwordHash,
        phone: `+7999${String(1000000 + i).substring(0, 7)}`,
        isVerified: true,
        isActive: true,
      });
      
      const savedUser = await userRepository.save(user);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ
      const coordinates = generateCityCoordinates(city.lat, city.lng);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const profile = profileRepository.create({
        userId: savedUser.id,
        name,
        age: Math.floor(Math.random() * 15) + 20, // 20-35 –ª–µ—Ç
        gender,
        interestedIn: gender === Gender.FEMALE ? InterestedIn.MALE : InterestedIn.FEMALE,
        bio: `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç ${name}, –∂–∏–≤—É –≤ –≥–æ—Ä–æ–¥–µ ${city.name}. ${generateRandomInterests().slice(0, 2).join(' –∏ ')} - –º–æ–∏ –≥–ª–∞–≤–Ω—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è.`,
        latitude: Math.round(coordinates.latitude * 10000) / 10000,
        longitude: Math.round(coordinates.longitude * 10000) / 10000,
        city: city.name,
        country: city.country,
        interests: generateRandomInterests(),
        photos: [`https://i.pravatar.cc/400?img=${i + 20}`],
        maxDistance: [10, 25, 50, 100][Math.floor(Math.random() * 4)],
        isPremium: Math.random() > 0.8, // 20% –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        isLocationVisible: Math.random() > 0.1, // 90% –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ª–æ–∫–∞—Ü–∏—é
        lastActive: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // –ê–∫—Ç–∏–≤–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      });
      
      await profileRepository.save(profile);
      
      if ((i + 1) % 10 === 0) {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${i + 1}/${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i}:`, error.message);
    }
  }
  
  console.log(`üó∫Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
}